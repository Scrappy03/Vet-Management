((t, e) => { "object" == typeof exports && "undefined" != typeof module ? module.exports = e(require("@popperjs/core")) : "function" == typeof define && define.amd ? define(["@popperjs/core"], e) : (t = "undefined" != typeof globalThis ? globalThis : t || self).bootstrap = e(t.Popper) })(this, function (t) { let i = (t => { var s, e = Object.create(null, { [Symbol.toStringTag]: { value: "Module" } }); if (t) for (let i in t) "default" !== i && (s = Object.getOwnPropertyDescriptor(t, i), Object.defineProperty(e, i, s.get ? s : { enumerable: !0, get: () => t[i] })); return e.default = t, Object.freeze(e) })(t), s = new Map, n = { set(t, e, i) { s.has(t) || s.set(t, new Map); t = s.get(t); t.has(e) || 0 === t.size ? t.set(e, i) : console.error(`Bootstrap doesn't allow more than one instance per element. Bound instance: ${Array.from(t.keys())[0]}.`) }, get: (t, e) => s.has(t) && s.get(t).get(e) || null, remove(t, e) { var i; s.has(t) && ((i = s.get(t)).delete(e), 0 === i.size) && s.delete(t) } }, o = "transitionend", r = t => t = t && window.CSS && window.CSS.escape ? t.replace(/#([^\s"#']+)/g, (t, e) => "#" + CSS.escape(e)) : t, a = t => { t.dispatchEvent(new Event(o)) }, l = t => !(!t || "object" != typeof t) && void 0 !== (t = void 0 !== t.jquery ? t[0] : t).nodeType, c = t => l(t) ? t.jquery ? t[0] : t : "string" == typeof t && 0 < t.length ? document.querySelector(r(t)) : null, h = t => { if (!l(t) || 0 === t.getClientRects().length) return !1; let e = "visible" === getComputedStyle(t).getPropertyValue("visibility"), i = t.closest("details:not([open])"); if (i && i !== t) { let e = t.closest("summary"); if (e && e.parentNode !== i) return !1; if (null === e) return !1 } return e }, d = t => !t || t.nodeType !== Node.ELEMENT_NODE || !!t.classList.contains("disabled") || (void 0 !== t.disabled ? t.disabled : t.hasAttribute("disabled") && "false" !== t.getAttribute("disabled")), u = t => { var e; return document.documentElement.attachShadow ? "function" == typeof t.getRootNode ? (e = t.getRootNode()) instanceof ShadowRoot ? e : null : t instanceof ShadowRoot ? t : t.parentNode ? u(t.parentNode) : null : null }, _ = () => { }, g = t => { t.offsetHeight }, f = () => window.jQuery && !document.body.hasAttribute("data-bs-no-jquery") ? window.jQuery : null, m = [], p = () => "rtl" === document.documentElement.dir, b = t => { var e = () => { let e = f(); if (e) { let i = t.NAME, s = e.fn[i]; e.fn[i] = t.jQueryInterface, e.fn[i].Constructor = t, e.fn[i].noConflict = () => (e.fn[i] = s, t.jQueryInterface) } }; "loading" === document.readyState ? (m.length || document.addEventListener("DOMContentLoaded", () => { for (var t of m) t() }), m.push(e)) : e() }, v = (t, e = [], i = t) => "function" == typeof t ? t(...e) : i, y = (t, e, i = !0) => { if (i) { i = (t => { if (!t) return 0; let { transitionDuration: e, transitionDelay: i } = window.getComputedStyle(t); var t = Number.parseFloat(e), n = Number.parseFloat(i); return t || n ? (e = e.split(",")[0], i = i.split(",")[0], 1e3 * (Number.parseFloat(e) + Number.parseFloat(i))) : 0 })(e) + 5; let n = !1, r = ({ target: i }) => { i === e && (n = !0, e.removeEventListener(o, r), v(t)) }; e.addEventListener(o, r), setTimeout(() => { n || a(e) }, i) } else v(t) }, w = (t, e, i, s) => { var n = t.length; let o = t.indexOf(e); return -1 === o ? !i && s ? t[n - 1] : t[0] : (o += i ? 1 : -1, s && (o = (o + n) % n), t[Math.max(0, Math.min(o, n - 1))]) }, A = /[^.]*(?=\..*)\.|.*/, E = /\..*/, C = /::\d+$/, T = {}, k = 1, $ = { mouseenter: "mouseover", mouseleave: "mouseout" }, S = new Set(["click", "dblclick", "mouseup", "mousedown", "contextmenu", "mousewheel", "DOMMouseScroll", "mouseover", "mouseout", "mousemove", "selectstart", "selectend", "keydown", "keypress", "keyup", "orientationchange", "touchstart", "touchmove", "touchend", "touchcancel", "pointerdown", "pointermove", "pointerup", "pointerleave", "pointercancel", "gesturestart", "gesturechange", "gestureend", "focus", "blur", "change", "reset", "select", "submit", "focusin", "focusout", "load", "unload", "beforeunload", "resize", "move", "DOMContentLoaded", "readystatechange", "error", "abort", "scroll"]); function L(t, e) { return e && e + "::" + k++ || t.uidEvent || k++ } function O(t) { var e = L(t); return t.uidEvent = e, T[e] = T[e] || {}, T[e] } function I(t, e, i = null) { return Object.values(t).find(t => t.callable === e && t.delegationSelector === i) } function D(t, e, i) { var s = "string" == typeof e, e = !s && e || i; let o = M(t); return [s, e, o = S.has(o) ? o : t] } function N(t, e, i, s, n) { if ("string" == typeof e && t) { let [o, r, a] = D(e, i, s); if (e in $) { let t = t => function (e) { if (!e.relatedTarget || e.relatedTarget !== e.delegateTarget && !e.delegateTarget.contains(e.relatedTarget)) return t.call(this, e) }; r = t(r) } var s = O(t), s = s[a] || (s[a] = {}), h = I(s, r, o ? i : null); if (h) return h.oneOff = h.oneOff && n; h = L(r, e.replace(A, "")), e = o ? ((t, e, i) => function s(n) { var o = t.querySelectorAll(e); for (let r = n.target; r && r !== this; r = r.parentNode)for (var a of o) if (a === r) return F(n, { delegateTarget: r }), s.oneOff && j.off(t, n.type, e, i), i.apply(r, [n]) })(t, i, r) : ((t, e) => function i(s) { return F(s, { delegateTarget: t }), i.oneOff && j.off(t, s.type, e), e.apply(t, [s]) })(t, r); e.delegationSelector = o ? i : null, e.callable = r, e.oneOff = n, s[e.uidEvent = h] = e, t.addEventListener(a, e, o) } } function P(t, e, i, s, n) { s = I(e[i], s, n); s && (t.removeEventListener(i, s, Boolean(n)), delete e[i][s.uidEvent]) } function M(t) { return t = t.replace(E, ""), $[t] || t } let j = { on(t, e, i, s) { N(t, e, i, s, !1) }, one(t, e, i, s) { N(t, e, i, s, !0) }, off(t, e, i, s) { if ("string" == typeof e && t) { let [n, o, r] = D(e, i, s), a = r !== e, l = O(t), c = l[r] || {}, h = e.startsWith("."); if (void 0 === o) { if (h) for (let i of Object.keys(l)) ((t, e, i, s) => { var o, r, n = e[i] || {}; for ([o, r] of Object.entries(n)) o.includes(s) && P(t, e, i, r.callable, r.delegationSelector) })(t, l, i, e.slice(1)); for (let [i, s] of Object.entries(c)) { let n = i.replace(C, ""); a && !e.includes(n) || P(t, l, r, s.callable, s.delegationSelector) } } else Object.keys(c).length && P(t, l, r, o, n ? i : null) } }, trigger(t, e, i) { if ("string" != typeof e || !t) return null; var s = f(); let n = null, o = !0, r = !0, a = !1; e !== M(e) && s && (n = s.Event(e, i), s(t).trigger(n), o = !n.isPropagationStopped(), r = !n.isImmediatePropagationStopped(), a = n.isDefaultPrevented()); s = F(new Event(e, { bubbles: o, cancelable: !0 }), i); return a && s.preventDefault(), r && t.dispatchEvent(s), s.defaultPrevented && n && n.preventDefault(), s } }; function F(t, e = {}) { for (let [i, s] of Object.entries(e)) try { t[i] = s } catch (e) { Object.defineProperty(t, i, { configurable: !0, get: () => s }) } return t } function z(t) { if ("true" === t) return !0; if ("false" === t) return !1; if (t === Number(t).toString()) return Number(t); if ("" === t || "null" === t) return null; if ("string" != typeof t) return t; try { return JSON.parse(decodeURIComponent(t)) } catch (e) { return t } } function H(t) { return t.replace(/[A-Z]/g, t => "-" + t.toLowerCase()) } let B = { setDataAttribute(t, e, i) { t.setAttribute("data-bs-" + H(e), i) }, removeDataAttribute(t, e) { t.removeAttribute("data-bs-" + H(e)) }, getDataAttributes(t) { if (!t) return {}; var s, e = {}; for (s of Object.keys(t.dataset).filter(t => t.startsWith("bs") && !t.startsWith("bsConfig"))) { let i = s.replace(/^bs/, ""); e[i = i.charAt(0).toLowerCase() + i.slice(1, i.length)] = z(t.dataset[s]) } return e }, getDataAttribute: (t, e) => z(t.getAttribute("data-bs-" + H(e))) }; class q { static get Default() { return {} } static get DefaultType() { return {} } static get NAME() { throw new Error('You have to implement the static method "NAME", for each component!') } _getConfig(t) { return t = this._mergeConfigObj(t), t = this._configAfterMerge(t), this._typeCheckConfig(t), t } _configAfterMerge(t) { return t } _mergeConfigObj(t, e) { var i = l(e) ? B.getDataAttribute(e, "config") : {}; return { ...this.constructor.Default, ..."object" == typeof i ? i : {}, ...l(e) ? B.getDataAttributes(e) : {}, ..."object" == typeof t ? t : {} } } _typeCheckConfig(t, e = this.constructor.DefaultType) { for (var [s, n] of Object.entries(e)) { let e = t[s], o = l(e) ? "element" : null == (i = e) ? "" + i : Object.prototype.toString.call(i).match(/\s([a-z]+)/i)[1].toLowerCase(); if (!new RegExp(n).test(o)) throw new TypeError(`${this.constructor.NAME.toUpperCase()}: Option "${s}" provided type "${o}" but expected type "${n}".`) } var i } } class W extends q { constructor(t, e) { super(), (t = c(t)) && (this._element = t, this._config = this._getConfig(e), n.set(this._element, this.constructor.DATA_KEY, this)) } dispose() { n.remove(this._element, this.constructor.DATA_KEY), j.off(this._element, this.constructor.EVENT_KEY); for (var t of Object.getOwnPropertyNames(this)) this[t] = null } _queueCallback(t, e, i = !0) { y(t, e, i) } _getConfig(t) { return t = this._mergeConfigObj(t, this._element), t = this._configAfterMerge(t), this._typeCheckConfig(t), t } static getInstance(t) { return n.get(c(t), this.DATA_KEY) } static getOrCreateInstance(t, e = {}) { return this.getInstance(t) || new this(t, "object" == typeof e ? e : null) } static get VERSION() { return "5.3.3" } static get DATA_KEY() { return "bs." + this.NAME } static get EVENT_KEY() { return "." + this.DATA_KEY } static eventName(t) { return "" + t + this.EVENT_KEY } } let R = t => { let e = t.getAttribute("data-bs-target"); if (!e || "#" === e) { let i = t.getAttribute("href"); if (!i || !i.includes("#") && !i.startsWith(".")) return null; i.includes("#") && !i.startsWith("#") && (i = "#" + i.split("#")[1]), e = i && "#" !== i ? i.trim() : null } return e ? e.split(",").map(t => r(t)).join(",") : null }, K = { find: (t, e = document.documentElement) => [].concat(...Element.prototype.querySelectorAll.call(e, t)), findOne: (t, e = document.documentElement) => Element.prototype.querySelector.call(e, t), children: (t, e) => [].concat(...t.children).filter(t => t.matches(e)), parents(t, e) { var i = []; let s = t.parentNode.closest(e); for (; s;)i.push(s), s = s.parentNode.closest(e); return i }, prev(t, e) { let i = t.previousElementSibling; for (; i;) { if (i.matches(e)) return [i]; i = i.previousElementSibling } return [] }, next(t, e) { let i = t.nextElementSibling; for (; i;) { if (i.matches(e)) return [i]; i = i.nextElementSibling } return [] }, focusableChildren(t) { var e = ["a", "button", "input", "textarea", "select", "details", "[tabindex]", '[contenteditable="true"]'].map(t => t + ':not([tabindex^="-"])').join(","); return this.find(e, t).filter(t => !d(t) && h(t)) }, getSelectorFromElement(t) { t = R(t); return t && K.findOne(t) ? t : null }, getElementFromSelector(t) { t = R(t); return t ? K.findOne(t) : null }, getMultipleElementsFromSelector(t) { t = R(t); return t ? K.find(t) : [] } }, V = (t, e = "hide") => { let i = "click.dismiss" + t.EVENT_KEY, s = t.NAME; j.on(document, i, `[data-bs-dismiss="${s}"]`, function (i) { ["A", "AREA"].includes(this.tagName) && i.preventDefault(), d(this) || (i = K.getElementFromSelector(this) || this.closest("." + s), t.getOrCreateInstance(i)[e]()) }) }; class U extends W { static get NAME() { return "alert" } close() { var t; j.trigger(this._element, "close.bs.alert").defaultPrevented || (this._element.classList.remove("show"), t = this._element.classList.contains("fade"), this._queueCallback(() => this._destroyElement(), this._element, t)) } _destroyElement() { this._element.remove(), j.trigger(this._element, "closed.bs.alert"), this.dispose() } static jQueryInterface(t) { return this.each(function () { var e = U.getOrCreateInstance(this); if ("string" == typeof t) { if (void 0 === e[t] || t.startsWith("_") || "constructor" === t) throw new TypeError(`No method named "${t}"`); e[t](this) } }) } } V(U, "close"), b(U); let G = '[data-bs-toggle="button"]'; class J extends W { static get NAME() { return "button" } toggle() { this._element.setAttribute("aria-pressed", this._element.classList.toggle("active")) } static jQueryInterface(t) { return this.each(function () { var e = J.getOrCreateInstance(this); "toggle" === t && e[t]() }) } } j.on(document, "click.bs.button.data-api", G, t => { t.preventDefault(); t = t.target.closest(G); J.getOrCreateInstance(t).toggle() }), b(J); let Z = ".bs.swipe", ot = (Z, Z, Z, Z, Z, { endCallback: null, leftCallback: null, rightCallback: null }), rt = { endCallback: "(function|null)", leftCallback: "(function|null)", rightCallback: "(function|null)" }; class at extends q { constructor(t, e) { super(), (this._element = t) && at.isSupported() && (this._config = this._getConfig(e), this._deltaX = 0, this._supportPointerEvents = Boolean(window.PointerEvent), this._initEvents()) } static get Default() { return ot } static get DefaultType() { return rt } static get NAME() { return "swipe" } dispose() { j.off(this._element, Z) } _start(t) { this._supportPointerEvents ? this._eventIsPointerPenTouch(t) && (this._deltaX = t.clientX) : this._deltaX = t.touches[0].clientX } _end(t) { this._eventIsPointerPenTouch(t) && (this._deltaX = t.clientX - this._deltaX), this._handleSwipe(), v(this._config.endCallback) } _move(t) { this._deltaX = t.touches && 1 < t.touches.length ? 0 : t.touches[0].clientX - this._deltaX } _handleSwipe() { var t = Math.abs(this._deltaX); t <= 40 || (t = t / this._deltaX, this._deltaX = 0, t && v(0 < t ? this._config.rightCallback : this._config.leftCallback)) } _initEvents() { this._supportPointerEvents ? (j.on(this._element, "pointerdown.bs.swipe", t => this._start(t)), j.on(this._element, "pointerup.bs.swipe", t => this._end(t)), this._element.classList.add("pointer-event")) : (j.on(this._element, "touchstart.bs.swipe", t => this._start(t)), j.on(this._element, "touchmove.bs.swipe", t => this._move(t)), j.on(this._element, "touchend.bs.swipe", t => this._end(t))) } _eventIsPointerPenTouch(t) { return this._supportPointerEvents && ("pen" === t.pointerType || "touch" === t.pointerType) } static isSupported() { return "ontouchstart" in document.documentElement || 0 < navigator.maxTouchPoints } } let lt = ".bs.carousel", ht = "next", dt = "prev", ut = "left", _t = "right", ft = "slid" + lt, At = "carousel", Et = "active", Ct = ".active", Tt = ".carousel-item", $t = (Ct, Tt, { ArrowLeft: _t, ArrowRight: ut }), St = { interval: 5e3, keyboard: !0, pause: "hover", ride: !1, touch: !0, wrap: !0 }, Lt = { interval: "(number|boolean)", keyboard: "boolean", pause: "(string|boolean)", ride: "(boolean|string)", touch: "boolean", wrap: "boolean" }; class Ot extends W { constructor(t, e) { super(t, e), this._interval = null, this._activeElement = null, this._isSliding = !1, this.touchTimeout = null, this._swipeHelper = null, this._indicatorsElement = K.findOne(".carousel-indicators", this._element), this._addEventListeners(), this._config.ride === At && this.cycle() } static get Default() { return St } static get DefaultType() { return Lt } static get NAME() { return "carousel" } next() { this._slide(ht) } nextWhenVisible() { !document.hidden && h(this._element) && this.next() } prev() { this._slide(dt) } pause() { this._isSliding && a(this._element), this._clearInterval() } cycle() { this._clearInterval(), this._updateInterval(), this._interval = setInterval(() => this.nextWhenVisible(), this._config.interval) } _maybeEnableCycle() { this._config.ride && (this._isSliding ? j.one(this._element, ft, () => this.cycle()) : this.cycle()) } to(t) { var i, e = this._getItems(); t > e.length - 1 || t < 0 || (this._isSliding ? j.one(this._element, ft, () => this.to(t)) : (i = this._getItemIndex(this._getActive())) !== t && (i = i < t ? ht : dt, this._slide(i, e[t]))) } dispose() { this._swipeHelper && this._swipeHelper.dispose(), super.dispose() } _configAfterMerge(t) { return t.defaultInterval = t.interval, t } _addEventListeners() { this._config.keyboard && j.on(this._element, "keydown.bs.carousel", t => this._keydown(t)), "hover" === this._config.pause && (j.on(this._element, "mouseenter.bs.carousel", () => this.pause()), j.on(this._element, "mouseleave.bs.carousel", () => this._maybeEnableCycle())), this._config.touch && at.isSupported() && this._addTouchEventListeners() } _addTouchEventListeners() { for (let t of K.find(".carousel-item img", this._element)) j.on(t, "dragstart.bs.carousel", t => t.preventDefault()); let t = { leftCallback: () => this._slide(this._directionToOrder(ut)), rightCallback: () => this._slide(this._directionToOrder(_t)), endCallback: () => { "hover" === this._config.pause && (this.pause(), this.touchTimeout && clearTimeout(this.touchTimeout), this.touchTimeout = setTimeout(() => this._maybeEnableCycle(), 500 + this._config.interval)) } }; this._swipeHelper = new at(this._element, t) } _keydown(t) { var e; /input|textarea/i.test(t.target.tagName) || (e = $t[t.key]) && (t.preventDefault(), this._slide(this._directionToOrder(e))) } _getItemIndex(t) { return this._getItems().indexOf(t) } _setActiveIndicatorElement(t) { var e; this._indicatorsElement && ((e = K.findOne(Ct, this._indicatorsElement)).classList.remove(Et), e.removeAttribute("aria-current"), e = K.findOne(`[data-bs-slide-to="${t}"]`, this._indicatorsElement)) && (e.classList.add(Et), e.setAttribute("aria-current", "true")) } _updateInterval() { var t = this._activeElement || this._getActive(); t && (t = Number.parseInt(t.getAttribute("data-bs-interval"), 10), this._config.interval = t || this._config.defaultInterval) } _slide(t, e = null) { if (!this._isSliding) { let i = this._getActive(), s = t === ht, n = e || w(this._getItems(), i, s, this._config.wrap); if (n !== i) { let o = this._getItemIndex(n), r = e => j.trigger(this._element, e, { relatedTarget: n, direction: this._orderToDirection(t), from: this._getItemIndex(i), to: o }); if (!r("slide.bs.carousel").defaultPrevented && i && n) { e = Boolean(this._interval); this.pause(), this._isSliding = !0, this._setActiveIndicatorElement(o), this._activeElement = n; let l = s ? "carousel-item-start" : "carousel-item-end", c = s ? "carousel-item-next" : "carousel-item-prev"; n.classList.add(c), g(n), i.classList.add(l), n.classList.add(l), this._queueCallback(() => { n.classList.remove(l, c), n.classList.add(Et), i.classList.remove(Et, c, l), this._isSliding = !1, r(ft) }, i, this._isAnimated()), e && this.cycle() } } } } _isAnimated() { return this._element.classList.contains("slide") } _getActive() { return K.findOne(".active.carousel-item", this._element) } _getItems() { return K.find(Tt, this._element) } _clearInterval() { this._interval && (clearInterval(this._interval), this._interval = null) } _directionToOrder(t) { return p() ? t === ut ? dt : ht : t === ut ? ht : dt } _orderToDirection(t) { return p() ? t === dt ? ut : _t : t === dt ? _t : ut } static jQueryInterface(t) { return this.each(function () { var e = Ot.getOrCreateInstance(this, t); if ("number" != typeof t) { if ("string" == typeof t) { if (void 0 === e[t] || t.startsWith("_") || "constructor" === t) throw new TypeError(`No method named "${t}"`); e[t]() } } else e.to(t) }) } } j.on(document, "click.bs.carousel.data-api", "[data-bs-slide], [data-bs-slide-to]", function (t) { var e = K.getElementFromSelector(this); e && e.classList.contains(At) && (t.preventDefault(), t = Ot.getOrCreateInstance(e), (e = this.getAttribute("data-bs-slide-to")) ? t.to(e) : "next" === B.getDataAttribute(this, "slide") ? t.next() : t.prev(), t._maybeEnableCycle()) }), j.on(window, "load.bs.carousel.data-api", () => { var e; for (e of K.find('[data-bs-ride="carousel"]')) Ot.getOrCreateInstance(e) }), b(Ot); let jt = "show", Ft = "collapse", zt = "collapsing", Bt = (Ft, Ft, '[data-bs-toggle="collapse"]'), qt = { parent: null, toggle: !0 }, Wt = { parent: "(null|element)", toggle: "boolean" }; class Rt extends W { constructor(t, e) { super(t, e), this._isTransitioning = !1, this._triggerArray = []; let i = K.find(Bt); for (let t of i) { let e = K.getSelectorFromElement(t), i = K.find(e).filter(t => t === this._element); null !== e && i.length && this._triggerArray.push(t) } this._initializeChildren(), this._config.parent || this._addAriaAndCollapsedClass(this._triggerArray, this._isShown()), this._config.toggle && this.toggle() } static get Default() { return qt } static get DefaultType() { return Wt } static get NAME() { return "collapse" } toggle() { this._isShown() ? this.hide() : this.show() } show() { if (!this._isTransitioning && !this._isShown()) { let t = []; if (!((t = this._config.parent ? this._getFirstLevelChildren(".collapse.show, .collapse.collapsing").filter(t => t !== this._element).map(t => Rt.getOrCreateInstance(t, { toggle: !1 })) : t).length && t[0]._isTransitioning || j.trigger(this._element, "show.bs.collapse").defaultPrevented)) { for (let e of t) e.hide(); let e = this._getDimension(); this._element.classList.remove(Ft), this._element.classList.add(zt), this._element.style[e] = 0, this._addAriaAndCollapsedClass(this._triggerArray, !0), this._isTransitioning = !0; var i = "scroll" + (e[0].toUpperCase() + e.slice(1)); this._queueCallback(() => { this._isTransitioning = !1, this._element.classList.remove(zt), this._element.classList.add(Ft, jt), this._element.style[e] = "", j.trigger(this._element, "shown.bs.collapse") }, this._element, !0), this._element.style[e] = this._element[i] + "px" } } } hide() { if (!this._isTransitioning && this._isShown() && !j.trigger(this._element, "hide.bs.collapse").defaultPrevented) { let t = this._getDimension(); this._element.style[t] = this._element.getBoundingClientRect()[t] + "px", g(this._element), this._element.classList.add(zt), this._element.classList.remove(Ft, jt); for (let t of this._triggerArray) { var e = K.getElementFromSelector(t); e && !this._isShown(e) && this._addAriaAndCollapsedClass([t], !1) } this._isTransitioning = !0, this._element.style[t] = "", this._queueCallback(() => { this._isTransitioning = !1, this._element.classList.remove(zt), this._element.classList.add(Ft), j.trigger(this._element, "hidden.bs.collapse") }, this._element, !0) } } _isShown(t = this._element) { return t.classList.contains(jt) } _configAfterMerge(t) { return t.toggle = Boolean(t.toggle), t.parent = c(t.parent), t } _getDimension() { return this._element.classList.contains("collapse-horizontal") ? "width" : "height" } _initializeChildren() { if (this._config.parent) { let t = this._getFirstLevelChildren(Bt); for (var e of t) { let t = K.getElementFromSelector(e); t && this._addAriaAndCollapsedClass([e], this._isShown(t)) } } } _getFirstLevelChildren(t) { let e = K.find(":scope .collapse .collapse", this._config.parent); return K.find(t, this._config.parent).filter(t => !e.includes(t)) } _addAriaAndCollapsedClass(t, e) { if (t.length) for (var i of t) i.classList.toggle("collapsed", !e), i.setAttribute("aria-expanded", e) } static jQueryInterface(t) { let e = {}; return "string" == typeof t && /show|hide/.test(t) && (e.toggle = !1), this.each(function () { var i = Rt.getOrCreateInstance(this, e); if ("string" == typeof t) { if (void 0 === i[t]) throw new TypeError(`No method named "${t}"`); i[t]() } }) } } j.on(document, "click.bs.collapse.data-api", Bt, function (t) { ("A" === t.target.tagName || t.delegateTarget && "A" === t.delegateTarget.tagName) && t.preventDefault(); for (let t of K.getMultipleElementsFromSelector(this)) Rt.getOrCreateInstance(t, { toggle: !1 }).toggle() }), b(Rt); let Kt = "dropdown", Vt = ".bs.dropdown", Qt = ".data-api", Yt = "ArrowDown", te = "click" + Vt + Qt, ee = "keydown" + Vt + Qt, se = "show", ne = '[data-bs-toggle="dropdown"]:not(.disabled):not(:disabled)', re = (ne, ".dropdown-menu"), ae = p() ? "top-end" : "top-start", le = p() ? "top-start" : "top-end", ce = p() ? "bottom-end" : "bottom-start", he = p() ? "bottom-start" : "bottom-end", de = p() ? "left-start" : "right-start", ue = p() ? "right-start" : "left-start", _e = { autoClose: !0, boundary: "clippingParents", display: "dynamic", offset: [0, 2], popperConfig: null, reference: "toggle" }, ge = { autoClose: "(boolean|string)", boundary: "(string|element)", display: "string", offset: "(array|string|function)", popperConfig: "(null|object|function)", reference: "(string|element|object)" }; class fe extends W { constructor(t, e) { super(t, e), this._popper = null, this._parent = this._element.parentNode, this._menu = K.next(this._element, re)[0] || K.prev(this._element, re)[0] || K.findOne(re, this._parent), this._inNavbar = this._detectNavbar() } static get Default() { return _e } static get DefaultType() { return ge } static get NAME() { return Kt } toggle() { return this._isShown() ? this.hide() : this.show() } show() { if (!d(this._element) && !this._isShown()) { let t = { relatedTarget: this._element }; if (!j.trigger(this._element, "show.bs.dropdown", t).defaultPrevented) { if (this._createPopper(), "ontouchstart" in document.documentElement && !this._parent.closest(".navbar-nav")) for (let t of [].concat(...document.body.children)) j.on(t, "mouseover", _); this._element.focus(), this._element.setAttribute("aria-expanded", !0), this._menu.classList.add(se), this._element.classList.add(se), j.trigger(this._element, "shown.bs.dropdown", t) } } } hide() { var t; !d(this._element) && this._isShown() && (t = { relatedTarget: this._element }, this._completeHide(t)) } dispose() { this._popper && this._popper.destroy(), super.dispose() } update() { this._inNavbar = this._detectNavbar(), this._popper && this._popper.update() } _completeHide(t) { if (!j.trigger(this._element, "hide.bs.dropdown", t).defaultPrevented) { if ("ontouchstart" in document.documentElement) for (let t of [].concat(...document.body.children)) j.off(t, "mouseover", _); this._popper && this._popper.destroy(), this._menu.classList.remove(se), this._element.classList.remove(se), this._element.setAttribute("aria-expanded", "false"), B.removeDataAttribute(this._menu, "popper"), j.trigger(this._element, "hidden.bs.dropdown", t) } } _getConfig(t) { if ("object" != typeof (t = super._getConfig(t)).reference || l(t.reference) || "function" == typeof t.reference.getBoundingClientRect) return t; throw new TypeError(Kt.toUpperCase() + ': Option "reference" provided type "object" without a required "getBoundingClientRect" method.') } _createPopper() { if (void 0 === i) throw new TypeError("Bootstrap's dropdowns require Popper (https://popper.js.org)"); let t = this._element; "parent" === this._config.reference ? t = this._parent : l(this._config.reference) ? t = c(this._config.reference) : "object" == typeof this._config.reference && (t = this._config.reference); var e = this._getPopperConfig(); this._popper = i.createPopper(t, this._menu, e) } _isShown() { return this._menu.classList.contains(se) } _getPlacement() { var e, t = this._parent; return t.classList.contains("dropend") ? de : t.classList.contains("dropstart") ? ue : t.classList.contains("dropup-center") ? "top" : t.classList.contains("dropdown-center") ? "bottom" : (e = "end" === getComputedStyle(this._menu).getPropertyValue("--bs-position").trim(), t.classList.contains("dropup") ? e ? le : ae : e ? he : ce) } _detectNavbar() { return null !== this._element.closest(".navbar") } _getOffset() { let t = this._config.offset; return "string" == typeof t ? t.split(",").map(t => Number.parseInt(t, 10)) : "function" == typeof t ? e => t(e, this._element) : t } _getPopperConfig() { var t = { placement: this._getPlacement(), modifiers: [{ name: "preventOverflow", options: { boundary: this._config.boundary } }, { name: "offset", options: { offset: this._getOffset() } }] }; return !this._inNavbar && "static" !== this._config.display || (B.setDataAttribute(this._menu, "popper", "static"), t.modifiers = [{ name: "applyStyles", enabled: !1 }]), { ...t, ...v(this._config.popperConfig, [t]) } } _selectMenuItem({ key: t, target: e }) { var i = K.find(".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)", this._menu).filter(t => h(t)); i.length && w(i, e, t === Yt, !i.includes(e)).focus() } static jQueryInterface(t) { return this.each(function () { var e = fe.getOrCreateInstance(this, t); if ("string" == typeof t) { if (void 0 === e[t]) throw new TypeError(`No method named "${t}"`); e[t]() } }) } static clearMenus(t) { if (2 !== t.button && ("keyup" !== t.type || "Tab" === t.key)) { let e = K.find('[data-bs-toggle="dropdown"]:not(.disabled):not(:disabled).show'); for (var i of e) { let e = fe.getInstance(i); var n; e && !1 !== e._config.autoClose && (n = (i = t.composedPath()).includes(e._menu), i.includes(e._element) || "inside" === e._config.autoClose && !n || "outside" === e._config.autoClose && n || e._menu.contains(t.target) && ("keyup" === t.type && "Tab" === t.key || /input|select|option|textarea|form/i.test(t.target.tagName)) || (i = { relatedTarget: e._element }, "click" === t.type && (i.clickEvent = t), e._completeHide(i))) } } } static dataApiKeydownHandler(t) { var e = /input|textarea/i.test(t.target.tagName), i = "Escape" === t.key, s = ["ArrowUp", Yt].includes(t.key); !s && !i || e && !i || (t.preventDefault(), e = this.matches(ne) ? this : K.prev(this, ne)[0] || K.next(this, ne)[0] || K.findOne(ne, t.delegateTarget.parentNode), i = fe.getOrCreateInstance(e), s ? (t.stopPropagation(), i.show(), i._selectMenuItem(t)) : i._isShown() && (t.stopPropagation(), i.hide(), e.focus())) } } j.on(document, ee, ne, fe.dataApiKeydownHandler), j.on(document, ee, re, fe.dataApiKeydownHandler), j.on(document, te, fe.clearMenus), j.on(document, "keyup.bs.dropdown.data-api", fe.clearMenus), j.on(document, te, ne, function (t) { t.preventDefault(), fe.getOrCreateInstance(this).toggle() }), b(fe); let me = "backdrop", be = "mousedown.bs." + me, ve = { className: "modal-backdrop", clickCallback: null, isAnimated: !1, isVisible: !0, rootElement: "body" }, ye = { className: "string", clickCallback: "(function|null)", isAnimated: "boolean", isVisible: "boolean", rootElement: "(element|string)" }; class we extends q { constructor(t) { super(), this._config = this._getConfig(t), this._isAppended = !1, this._element = null } static get Default() { return ve } static get DefaultType() { return ye } static get NAME() { return me } show(t) { var e; this._config.isVisible ? (this._append(), e = this._getElement(), this._config.isAnimated && g(e), e.classList.add("show"), this._emulateAnimation(() => { v(t) })) : v(t) } hide(t) { this._config.isVisible ? (this._getElement().classList.remove("show"), this._emulateAnimation(() => { this.dispose(), v(t) })) : v(t) } dispose() { this._isAppended && (j.off(this._element, be), this._element.remove(), this._isAppended = !1) } _getElement() { var t; return this._element || ((t = document.createElement("div")).className = this._config.className, this._config.isAnimated && t.classList.add("fade"), this._element = t), this._element } _configAfterMerge(t) { return t.rootElement = c(t.rootElement), t } _append() { var t; this._isAppended || (t = this._getElement(), this._config.rootElement.append(t), j.on(t, be, () => { v(this._config.clickCallback) }), this._isAppended = !0) } _emulateAnimation(t) { y(t, this._getElement(), this._config.isAnimated) } } let Ae = ".bs.focustrap", Te = (Ae, Ae, "backward"), ke = { autofocus: !0, trapElement: null }, $e = { autofocus: "boolean", trapElement: "element" }; class Se extends q { constructor(t) { super(), this._config = this._getConfig(t), this._isActive = !1, this._lastTabNavDirection = null } static get Default() { return ke } static get DefaultType() { return $e } static get NAME() { return "focustrap" } activate() { this._isActive || (this._config.autofocus && this._config.trapElement.focus(), j.off(document, Ae), j.on(document, "focusin.bs.focustrap", t => this._handleFocusin(t)), j.on(document, "keydown.tab.bs.focustrap", t => this._handleKeydown(t)), this._isActive = !0) } deactivate() { this._isActive && (this._isActive = !1, j.off(document, Ae)) } _handleFocusin(t) { var e = this._config.trapElement; t.target === document || t.target === e || e.contains(t.target) || (0 === (t = K.focusableChildren(e)).length ? e : this._lastTabNavDirection === Te ? t[t.length - 1] : t[0]).focus() } _handleKeydown(t) { "Tab" === t.key && (this._lastTabNavDirection = t.shiftKey ? Te : "forward") } } let Le = ".fixed-top, .fixed-bottom, .is-fixed, .sticky-top", Oe = ".sticky-top", Ie = "padding-right", De = "margin-right"; class Ne { constructor() { this._element = document.body } getWidth() { var t = document.documentElement.clientWidth; return Math.abs(window.innerWidth - t) } hide() { let t = this.getWidth(); this._disableOverFlow(), this._setElementAttributes(this._element, Ie, e => e + t), this._setElementAttributes(Le, Ie, e => e + t), this._setElementAttributes(Oe, De, e => e - t) } reset() { this._resetElementAttributes(this._element, "overflow"), this._resetElementAttributes(this._element, Ie), this._resetElementAttributes(Le, Ie), this._resetElementAttributes(Oe, De) } isOverflowing() { return 0 < this.getWidth() } _disableOverFlow() { this._saveInitialAttribute(this._element, "overflow"), this._element.style.overflow = "hidden" } _setElementAttributes(t, e, i) { let s = this.getWidth(); this._applyManipulationCallback(t, t => { var n; t !== this._element && window.innerWidth > t.clientWidth + s || (this._saveInitialAttribute(t, e), n = window.getComputedStyle(t).getPropertyValue(e), t.style.setProperty(e, i(Number.parseFloat(n)) + "px")) }) } _saveInitialAttribute(t, e) { var i = t.style.getPropertyValue(e); i && B.setDataAttribute(t, e, i) } _resetElementAttributes(t, e) { this._applyManipulationCallback(t, t => { var i = B.getDataAttribute(t, e); null !== i ? (B.removeDataAttribute(t, e), t.style.setProperty(e, i)) : t.style.removeProperty(e) }) } _applyManipulationCallback(t, e) { if (l(t)) e(t); else for (var i of K.find(t, this._element)) e(i) } } let Pe = ".bs.modal", je = (Pe, Pe, "hidden" + Pe), Fe = "show" + Pe, Ke = (Pe, Pe, Pe, Pe, Pe, Pe, "modal-open"), Qe = "modal-static", Xe = { backdrop: !0, focus: !0, keyboard: !0 }, Ye = { backdrop: "(boolean|string)", focus: "boolean", keyboard: "boolean" }; class Ue extends W { constructor(t, e) { super(t, e), this._dialog = K.findOne(".modal-dialog", this._element), this._backdrop = this._initializeBackDrop(), this._focustrap = this._initializeFocusTrap(), this._isShown = !1, this._isTransitioning = !1, this._scrollBar = new Ne, this._addEventListeners() } static get Default() { return Xe } static get DefaultType() { return Ye } static get NAME() { return "modal" } toggle(t) { return this._isShown ? this.hide() : this.show(t) } show(t) { this._isShown || this._isTransitioning || j.trigger(this._element, Fe, { relatedTarget: t }).defaultPrevented || (this._isShown = !0, this._isTransitioning = !0, this._scrollBar.hide(), document.body.classList.add(Ke), this._adjustDialog(), this._backdrop.show(() => this._showElement(t))) } hide() { !this._isShown || this._isTransitioning || j.trigger(this._element, "hide.bs.modal").defaultPrevented || (this._isShown = !1, this._isTransitioning = !0, this._focustrap.deactivate(), this._element.classList.remove("show"), this._queueCallback(() => this._hideModal(), this._element, this._isAnimated())) } dispose() { j.off(window, Pe), j.off(this._dialog, Pe), this._backdrop.dispose(), this._focustrap.deactivate(), super.dispose() } handleUpdate() { this._adjustDialog() } _initializeBackDrop() { return new we({ isVisible: Boolean(this._config.backdrop), isAnimated: this._isAnimated() }) } _initializeFocusTrap() { return new Se({ trapElement: this._element }) } _showElement(t) { document.body.contains(this._element) || document.body.append(this._element), this._element.style.display = "block", this._element.removeAttribute("aria-hidden"), this._element.setAttribute("aria-modal", !0), this._element.setAttribute("role", "dialog"), this._element.scrollTop = 0; var e = K.findOne(".modal-body", this._dialog); e && (e.scrollTop = 0), g(this._element), this._element.classList.add("show"), this._queueCallback(() => { this._config.focus && this._focustrap.activate(), this._isTransitioning = !1, j.trigger(this._element, "shown.bs.modal", { relatedTarget: t }) }, this._dialog, this._isAnimated()) } _addEventListeners() { j.on(this._element, "keydown.dismiss.bs.modal", t => { "Escape" === t.key && (this._config.keyboard ? this.hide() : this._triggerBackdropTransition()) }), j.on(window, "resize.bs.modal", () => { this._isShown && !this._isTransitioning && this._adjustDialog() }), j.on(this._element, "mousedown.dismiss.bs.modal", t => { j.one(this._element, "click.dismiss.bs.modal", e => { this._element === t.target && this._element === e.target && ("static" !== this._config.backdrop ? this._config.backdrop && this.hide() : this._triggerBackdropTransition()) }) }) } _hideModal() { this._element.style.display = "none", this._element.setAttribute("aria-hidden", !0), this._element.removeAttribute("aria-modal"), this._element.removeAttribute("role"), this._isTransitioning = !1, this._backdrop.hide(() => { document.body.classList.remove(Ke), this._resetAdjustments(), this._scrollBar.reset(), j.trigger(this._element, je) }) } _isAnimated() { return this._element.classList.contains("fade") } _triggerBackdropTransition() { if (!j.trigger(this._element, "hidePrevented.bs.modal").defaultPrevented) { let t = this._element.scrollHeight > document.documentElement.clientHeight, e = this._element.style.overflowY; "hidden" === e || this._element.classList.contains(Qe) || (t || (this._element.style.overflowY = "hidden"), this._element.classList.add(Qe), this._queueCallback(() => { this._element.classList.remove(Qe), this._queueCallback(() => { this._element.style.overflowY = e }, this._dialog) }, this._dialog), this._element.focus()) } } _adjustDialog() { let t = this._element.scrollHeight > document.documentElement.clientHeight, e = this._scrollBar.getWidth(), i = 0 < e; if (i && !t) { let t = p() ? "paddingLeft" : "paddingRight"; this._element.style[t] = e + "px" } if (!i && t) { let t = p() ? "paddingRight" : "paddingLeft"; this._element.style[t] = e + "px" } } _resetAdjustments() { this._element.style.paddingLeft = "", this._element.style.paddingRight = "" } static jQueryInterface(t, e) { return this.each(function () { var i = Ue.getOrCreateInstance(this, t); if ("string" == typeof t) { if (void 0 === i[t]) throw new TypeError(`No method named "${t}"`); i[t](e) } }) } } j.on(document, "click.bs.modal.data-api", '[data-bs-toggle="modal"]', function (t) { let e = K.getElementFromSelector(this);["A", "AREA"].includes(this.tagName) && t.preventDefault(), j.one(e, Fe, t => { t.defaultPrevented || j.one(e, je, () => { h(this) && this.focus() }) }); t = K.findOne(".modal.show"); t && Ue.getInstance(t).hide(), Ue.getOrCreateInstance(e).toggle(this) }), V(Ue), b(Ue); let Ge = ".bs.offcanvas", ei = "showing", si = ".offcanvas.show", ai = "hidePrevented" + Ge, li = "hidden" + Ge, ui = { backdrop: !0, keyboard: !0, scroll: !1 }, _i = { backdrop: "(boolean|string)", keyboard: "boolean", scroll: "boolean" }; class gi extends W { constructor(t, e) { super(t, e), this._isShown = !1, this._backdrop = this._initializeBackDrop(), this._focustrap = this._initializeFocusTrap(), this._addEventListeners() } static get Default() { return ui } static get DefaultType() { return _i } static get NAME() { return "offcanvas" } toggle(t) { return this._isShown ? this.hide() : this.show(t) } show(t) { this._isShown || j.trigger(this._element, "show.bs.offcanvas", { relatedTarget: t }).defaultPrevented || (this._isShown = !0, this._backdrop.show(), this._config.scroll || (new Ne).hide(), this._element.setAttribute("aria-modal", !0), this._element.setAttribute("role", "dialog"), this._element.classList.add(ei), this._queueCallback(() => { this._config.scroll && !this._config.backdrop || this._focustrap.activate(), this._element.classList.add("show"), this._element.classList.remove(ei), j.trigger(this._element, "shown.bs.offcanvas", { relatedTarget: t }) }, this._element, !0)) } hide() { !this._isShown || j.trigger(this._element, "hide.bs.offcanvas").defaultPrevented || (this._focustrap.deactivate(), this._element.blur(), this._isShown = !1, this._element.classList.add("hiding"), this._backdrop.hide(), this._queueCallback(() => { this._element.classList.remove("show", "hiding"), this._element.removeAttribute("aria-modal"), this._element.removeAttribute("role"), this._config.scroll || (new Ne).reset(), j.trigger(this._element, li) }, this._element, !0)) } dispose() { this._backdrop.dispose(), this._focustrap.deactivate(), super.dispose() } _initializeBackDrop() { var t = Boolean(this._config.backdrop); return new we({ className: "offcanvas-backdrop", isVisible: t, isAnimated: !0, rootElement: this._element.parentNode, clickCallback: t ? () => { "static" !== this._config.backdrop ? this.hide() : j.trigger(this._element, ai) } : null }) } _initializeFocusTrap() { return new Se({ trapElement: this._element }) } _addEventListeners() { j.on(this._element, "keydown.dismiss.bs.offcanvas", t => { "Escape" === t.key && (this._config.keyboard ? this.hide() : j.trigger(this._element, ai)) }) } static jQueryInterface(t) { return this.each(function () { var e = gi.getOrCreateInstance(this, t); if ("string" == typeof t) { if (void 0 === e[t] || t.startsWith("_") || "constructor" === t) throw new TypeError(`No method named "${t}"`); e[t](this) } }) } } j.on(document, "click.bs.offcanvas.data-api", '[data-bs-toggle="offcanvas"]', function (t) { var e = K.getElementFromSelector(this);["A", "AREA"].includes(this.tagName) && t.preventDefault(), d(this) || (j.one(e, li, () => { h(this) && this.focus() }), (t = K.findOne(si)) && t !== e && gi.getInstance(t).hide(), gi.getOrCreateInstance(e).toggle(this)) }), j.on(window, "load.bs.offcanvas.data-api", () => { for (var t of K.find(si)) gi.getOrCreateInstance(t).show() }), j.on(window, "resize.bs.offcanvas", () => { for (var t of K.find("[aria-modal][class*=show][class*=offcanvas-]")) "fixed" !== getComputedStyle(t).position && gi.getOrCreateInstance(t).hide() }), V(gi), b(gi); let fi = { "*": ["class", "dir", "id", "lang", "role", /^aria-[\w-]*$/i], a: ["target", "href", "title", "rel"], area: [], b: [], br: [], col: [], code: [], dd: [], div: [], dl: [], dt: [], em: [], hr: [], h1: [], h2: [], h3: [], h4: [], h5: [], h6: [], i: [], img: ["src", "srcset", "alt", "title", "width", "height"], li: [], ol: [], p: [], pre: [], s: [], small: [], span: [], sub: [], sup: [], strong: [], u: [], ul: [] }, mi = new Set(["background", "cite", "href", "itemtype", "longdesc", "poster", "src", "xlink:href"]), pi = /^(?!javascript:)(?:[a-z0-9+.-]+:|[^&:/?#]*(?:[/?#]|$))/i, vi = { allowList: fi, content: {}, extraClass: "", html: !1, sanitize: !0, sanitizeFn: null, template: "<div></div>" }, yi = { allowList: "object", content: "object", extraClass: "(string|function)", html: "boolean", sanitize: "boolean", sanitizeFn: "(null|function)", template: "string" }, wi = { entry: "(string|element|function|null)", selector: "(string|element)" }; class Ai extends q { constructor(t) { super(), this._config = this._getConfig(t) } static get Default() { return vi } static get DefaultType() { return yi } static get NAME() { return "TemplateFactory" } getContent() { return Object.values(this._config.content).map(t => this._resolvePossibleFunction(t)).filter(Boolean) } hasContent() { return 0 < this.getContent().length } changeContent(t) { return this._checkContent(t), this._config.content = { ...this._config.content, ...t }, this } toHtml() { var t = document.createElement("div"); t.innerHTML = this._maybeSanitize(this._config.template); for (let [e, i] of Object.entries(this._config.content)) this._setContent(t, i, e); let e = t.children[0], i = this._resolvePossibleFunction(this._config.extraClass); return i && e.classList.add(...i.split(" ")), e } _typeCheckConfig(t) { super._typeCheckConfig(t), this._checkContent(t.content) } _checkContent(t) { for (var [e, i] of Object.entries(t)) super._typeCheckConfig({ selector: e, entry: i }, wi) } _setContent(t, e, i) { i = K.findOne(i, t); i && ((e = this._resolvePossibleFunction(e)) ? l(e) ? this._putElementInTemplate(c(e), i) : this._config.html ? i.innerHTML = this._maybeSanitize(e) : i.textContent = e : i.remove()) } _maybeSanitize(t) { return this._config.sanitize ? ((t, e, i) => { if (!t.length) return t; if (i && "function" == typeof i) return i(t); let s = (new window.DOMParser).parseFromString(t, "text/html"), n = [].concat(...s.body.querySelectorAll("*")); for (let t of n) { let i = t.nodeName.toLowerCase(); if (Object.keys(e).includes(i)) { let s = [].concat(...t.attributes), n = [].concat(e["*"] || [], e[i] || []); for (let e of s) ((t, e) => { let i = t.nodeName.toLowerCase(); return e.includes(i) ? !mi.has(i) || Boolean(pi.test(t.nodeValue)) : e.filter(t => t instanceof RegExp).some(t => t.test(i)) })(e, n) || t.removeAttribute(e.nodeName) } else t.remove() } return s.body.innerHTML })(t, this._config.allowList, this._config.sanitizeFn) : t } _resolvePossibleFunction(t) { return v(t, [this]) } _putElementInTemplate(t, e) { this._config.html ? (e.innerHTML = "", e.append(t)) : e.textContent = t.textContent } } let Ei = new Set(["sanitize", "allowList", "sanitizeFn"]), Ci = "fade", Ti = "show", $i = "hide.bs.modal", Si = "hover", Li = "focus", Oi = { AUTO: "auto", TOP: "top", RIGHT: p() ? "left" : "right", BOTTOM: "bottom", LEFT: p() ? "right" : "left" }, Ii = { allowList: fi, animation: !0, boundary: "clippingParents", container: !1, customClass: "", delay: 0, fallbackPlacements: ["top", "right", "bottom", "left"], html: !1, offset: [0, 6], placement: "top", popperConfig: null, sanitize: !0, sanitizeFn: null, selector: !1, template: '<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>', title: "", trigger: "hover focus" }, Di = { allowList: "object", animation: "boolean", boundary: "(string|element)", container: "(string|element|boolean)", customClass: "(string|function)", delay: "(number|object)", fallbackPlacements: "array", html: "boolean", offset: "(array|string|function)", placement: "(string|function)", popperConfig: "(null|object|function)", sanitize: "boolean", sanitizeFn: "(null|function)", selector: "(string|boolean)", template: "string", title: "(string|element|function)", trigger: "string" }; class Ni extends W { constructor(t, e) { if (void 0 === i) throw new TypeError("Bootstrap's tooltips require Popper (https://popper.js.org)"); super(t, e), this._isEnabled = !0, this._timeout = 0, this._isHovered = null, this._activeTrigger = {}, this._popper = null, this._templateFactory = null, this._newContent = null, this.tip = null, this._setListeners(), this._config.selector || this._fixTitle() } static get Default() { return Ii } static get DefaultType() { return Di } static get NAME() { return "tooltip" } enable() { this._isEnabled = !0 } disable() { this._isEnabled = !1 } toggleEnabled() { this._isEnabled = !this._isEnabled } toggle() { this._isEnabled && (this._activeTrigger.click = !this._activeTrigger.click, this._isShown() ? this._leave() : this._enter()) } dispose() { clearTimeout(this._timeout), j.off(this._element.closest(".modal"), $i, this._hideModalHandler), this._element.getAttribute("data-bs-original-title") && this._element.setAttribute("title", this._element.getAttribute("data-bs-original-title")), this._disposePopper(), super.dispose() } show() { if ("none" === this._element.style.display) throw new Error("Please use show on visible elements"); if (this._isWithContent() && this._isEnabled) { let t = j.trigger(this._element, this.constructor.eventName("show")), e = (u(this._element) || this._element.ownerDocument.documentElement).contains(this._element); if (!t.defaultPrevented && e) { this._disposePopper(); var i = this._getTipElement(), s = (this._element.setAttribute("aria-describedby", i.getAttribute("id")), this._config).container; if (this._element.ownerDocument.documentElement.contains(this.tip) || (s.append(i), j.trigger(this._element, this.constructor.eventName("inserted"))), this._popper = this._createPopper(i), i.classList.add(Ti), "ontouchstart" in document.documentElement) for (let t of [].concat(...document.body.children)) j.on(t, "mouseover", _); this._queueCallback(() => { j.trigger(this._element, this.constructor.eventName("shown")), !1 === this._isHovered && this._leave(), this._isHovered = !1 }, this.tip, this._isAnimated()) } } } hide() { if (this._isShown() && !j.trigger(this._element, this.constructor.eventName("hide")).defaultPrevented) { if (this._getTipElement().classList.remove(Ti), "ontouchstart" in document.documentElement) for (var t of [].concat(...document.body.children)) j.off(t, "mouseover", _); this._activeTrigger.click = !1, this._activeTrigger[Li] = !1, this._activeTrigger[Si] = !1, this._isHovered = null, this._queueCallback(() => { this._isWithActiveTrigger() || (this._isHovered || this._disposePopper(), this._element.removeAttribute("aria-describedby"), j.trigger(this._element, this.constructor.eventName("hidden"))) }, this.tip, this._isAnimated()) } } update() { this._popper && this._popper.update() } _isWithContent() { return Boolean(this._getTitle()) } _getTipElement() { return this.tip || (this.tip = this._createTipElement(this._newContent || this._getContentForTemplate())), this.tip } _createTipElement(t) { t = this._getTemplateFactory(t).toHtml(); if (!t) return null; t.classList.remove(Ci, Ti), t.classList.add(`bs-${this.constructor.NAME}-auto`); var i = (t => { for (; t += Math.floor(1e6 * Math.random()), document.getElementById(t);); return t })(this.constructor.NAME).toString(); return t.setAttribute("id", i), this._isAnimated() && t.classList.add(Ci), t } setContent(t) { this._newContent = t, this._isShown() && (this._disposePopper(), this.show()) } _getTemplateFactory(t) { return this._templateFactory ? this._templateFactory.changeContent(t) : this._templateFactory = new Ai({ ...this._config, content: t, extraClass: this._resolvePossibleFunction(this._config.customClass) }), this._templateFactory } _getContentForTemplate() { return { ".tooltip-inner": this._getTitle() } } _getTitle() { return this._resolvePossibleFunction(this._config.title) || this._element.getAttribute("data-bs-original-title") } _initializeOnDelegatedTarget(t) { return this.constructor.getOrCreateInstance(t.delegateTarget, this._getDelegateConfig()) } _isAnimated() { return this._config.animation || this.tip && this.tip.classList.contains(Ci) } _isShown() { return this.tip && this.tip.classList.contains(Ti) } _createPopper(t) { var e = v(this._config.placement, [this, t, this._element]), e = Oi[e.toUpperCase()]; return i.createPopper(this._element, t, this._getPopperConfig(e)) } _getOffset() { let t = this._config.offset; return "string" == typeof t ? t.split(",").map(t => Number.parseInt(t, 10)) : "function" == typeof t ? e => t(e, this._element) : t } _resolvePossibleFunction(t) { return v(t, [this._element]) } _getPopperConfig(t) { t = { placement: t, modifiers: [{ name: "flip", options: { fallbackPlacements: this._config.fallbackPlacements } }, { name: "offset", options: { offset: this._getOffset() } }, { name: "preventOverflow", options: { boundary: this._config.boundary } }, { name: "arrow", options: { element: `.${this.constructor.NAME}-arrow` } }, { name: "preSetPlacement", enabled: !0, phase: "beforeMain", fn: t => { this._getTipElement().setAttribute("data-popper-placement", t.state.placement) } }] }; return { ...t, ...v(this._config.popperConfig, [t]) } } _setListeners() { let t = this._config.trigger.split(" "); for (var e of t) if ("click" === e) j.on(this._element, this.constructor.eventName("click"), this._config.selector, t => { this._initializeOnDelegatedTarget(t).toggle() }); else if ("manual" !== e) { let t = e === Si ? this.constructor.eventName("mouseenter") : this.constructor.eventName("focusin"), i = e === Si ? this.constructor.eventName("mouseleave") : this.constructor.eventName("focusout"); j.on(this._element, t, this._config.selector, t => { var e = this._initializeOnDelegatedTarget(t); e._activeTrigger["focusin" === t.type ? Li : Si] = !0, e._enter() }), j.on(this._element, i, this._config.selector, t => { var e = this._initializeOnDelegatedTarget(t); e._activeTrigger["focusout" === t.type ? Li : Si] = e._element.contains(t.relatedTarget), e._leave() }) } this._hideModalHandler = () => { this._element && this.hide() }, j.on(this._element.closest(".modal"), $i, this._hideModalHandler) } _fixTitle() { var t = this._element.getAttribute("title"); t && (this._element.getAttribute("aria-label") || this._element.textContent.trim() || this._element.setAttribute("aria-label", t), this._element.setAttribute("data-bs-original-title", t), this._element.removeAttribute("title")) } _enter() { this._isShown() || this._isHovered ? this._isHovered = !0 : (this._isHovered = !0, this._setTimeout(() => { this._isHovered && this.show() }, this._config.delay.show)) } _leave() { this._isWithActiveTrigger() || (this._isHovered = !1, this._setTimeout(() => { this._isHovered || this.hide() }, this._config.delay.hide)) } _setTimeout(t, e) { clearTimeout(this._timeout), this._timeout = setTimeout(t, e) } _isWithActiveTrigger() { return Object.values(this._activeTrigger).includes(!0) } _getConfig(t) { var e = B.getDataAttributes(this._element); for (let t of Object.keys(e)) Ei.has(t) && delete e[t]; return t = { ...e, ..."object" == typeof t && t ? t : {} }, t = this._mergeConfigObj(t), t = this._configAfterMerge(t), this._typeCheckConfig(t), t } _configAfterMerge(t) { return t.container = !1 === t.container ? document.body : c(t.container), "number" == typeof t.delay && (t.delay = { show: t.delay, hide: t.delay }), "number" == typeof t.title && (t.title = t.title.toString()), "number" == typeof t.content && (t.content = t.content.toString()), t } _getDelegateConfig() { var e, i, t = {}; for ([e, i] of Object.entries(this._config)) this.constructor.Default[e] !== i && (t[e] = i); return t.selector = !1, t.trigger = "manual", t } _disposePopper() { this._popper && (this._popper.destroy(), this._popper = null), this.tip && (this.tip.remove(), this.tip = null) } static jQueryInterface(t) { return this.each(function () { var e = Ni.getOrCreateInstance(this, t); if ("string" == typeof t) { if (void 0 === e[t]) throw new TypeError(`No method named "${t}"`); e[t]() } }) } } b(Ni); let Pi = { ...Ni.Default, content: "", offset: [0, 8], placement: "right", template: '<div class="popover" role="tooltip"><div class="popover-arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>', trigger: "click" }, xi = { ...Ni.DefaultType, content: "(null|string|element|function)" }; class Mi extends Ni { static get Default() { return Pi } static get DefaultType() { return xi } static get NAME() { return "popover" } _isWithContent() { return this._getTitle() || this._getContent() } _getContentForTemplate() { return { ".popover-header": this._getTitle(), ".popover-body": this._getContent() } } _getContent() { return this._resolvePossibleFunction(this._config.content) } static jQueryInterface(t) { return this.each(function () { var e = Mi.getOrCreateInstance(this, t); if ("string" == typeof t) { if (void 0 === e[t]) throw new TypeError(`No method named "${t}"`); e[t]() } }) } } b(Mi); let ji = ".bs.scrollspy", zi = "click" + ji, Bi = "active", qi = "[href]", Ki = { offset: null, rootMargin: "0px 0px -25%", smoothScroll: !1, target: null, threshold: [.1, .5, 1] }, Vi = { offset: "(number|null)", rootMargin: "string", smoothScroll: "boolean", target: "element", threshold: "array" }; class Qi extends W { constructor(t, e) { super(t, e), this._targetLinks = new Map, this._observableSections = new Map, this._rootElement = "visible" === getComputedStyle(this._element).overflowY ? null : this._element, this._activeTarget = null, this._observer = null, this._previousScrollData = { visibleEntryTop: 0, parentScrollTop: 0 }, this.refresh() } static get Default() { return Ki } static get DefaultType() { return Vi } static get NAME() { return "scrollspy" } refresh() { this._initializeTargetsAndObservables(), this._maybeEnableSmoothScroll(), this._observer ? this._observer.disconnect() : this._observer = this._getNewObserver(); for (var t of this._observableSections.values()) this._observer.observe(t) } dispose() { this._observer.disconnect(), super.dispose() } _configAfterMerge(t) { return t.target = c(t.target) || document.body, t.rootMargin = t.offset ? t.offset + "px 0px -30%" : t.rootMargin, "string" == typeof t.threshold && (t.threshold = t.threshold.split(",").map(t => Number.parseFloat(t))), t } _maybeEnableSmoothScroll() { this._config.smoothScroll && (j.off(this._config.target, zi), j.on(this._config.target, zi, qi, t => { var e = this._observableSections.get(t.target.hash); e && (t.preventDefault(), t = this._rootElement || window, e = e.offsetTop - this._element.offsetTop, t.scrollTo ? t.scrollTo({ top: e, behavior: "smooth" }) : t.scrollTop = e) })) } _getNewObserver() { var t = { root: this._rootElement, threshold: this._config.threshold, rootMargin: this._config.rootMargin }; return new IntersectionObserver(t => this._observerCallback(t), t) } _observerCallback(t) { let e = t => this._targetLinks.get("#" + t.target.id), i = t => { this._previousScrollData.visibleEntryTop = t.target.offsetTop, this._process(e(t)) }, s = (this._rootElement || document.documentElement).scrollTop, n = s >= this._previousScrollData.parentScrollTop; this._previousScrollData.parentScrollTop = s; for (var o of t) if (o.isIntersecting) { let t = o.target.offsetTop >= this._previousScrollData.visibleEntryTop; if (n && t) { if (i(o), !s) return } else n || t || i(o) } else this._activeTarget = null, this._clearActiveClass(e(o)) } _initializeTargetsAndObservables() { this._targetLinks = new Map, this._observableSections = new Map; let t = K.find(qi, this._config.target); for (var e of t) if (e.hash && !d(e)) { let t = K.findOne(decodeURI(e.hash), this._element); h(t) && (this._targetLinks.set(decodeURI(e.hash), e), this._observableSections.set(e.hash, t)) } } _process(t) { this._activeTarget !== t && (this._clearActiveClass(this._config.target), (this._activeTarget = t).classList.add(Bi), this._activateParents(t), j.trigger(this._element, "activate.bs.scrollspy", { relatedTarget: t })) } _activateParents(t) { if (t.classList.contains("dropdown-item")) K.findOne(".dropdown-toggle", t.closest(".dropdown")).classList.add(Bi); else for (var e of K.parents(t, ".nav, .list-group")) for (let t of K.prev(e, ".nav-link, .nav-item > .nav-link, .list-group-item")) t.classList.add(Bi) } _clearActiveClass(t) { t.classList.remove(Bi); var e = K.find(qi + "." + Bi, t); for (let t of e) t.classList.remove(Bi) } static jQueryInterface(t) { return this.each(function () { var e = Qi.getOrCreateInstance(this, t); if ("string" == typeof t) { if (void 0 === e[t] || t.startsWith("_") || "constructor" === t) throw new TypeError(`No method named "${t}"`); e[t]() } }) } } j.on(window, "load.bs.scrollspy.data-api", () => { for (var t of K.find('[data-bs-spy="scroll"]')) Qi.getOrCreateInstance(t) }), b(Qi); let ss = "ArrowRight", os = "ArrowDown", rs = "Home", ls = "active", hs = "show", ds = ".dropdown-toggle", us = `:not(${ds})`, _s = '[data-bs-toggle="tab"], [data-bs-toggle="pill"], [data-bs-toggle="list"]', gs = `.nav-link${us}, .list-group-item${us}, [role="tab"]${us}, ` + _s; ls, ls, ls; class ms extends W { constructor(t) { super(t), this._parent = this._element.closest('.list-group, .nav, [role="tablist"]'), this._parent && (this._setInitialAttributes(this._parent, this._getChildren()), j.on(this._element, "keydown.bs.tab", t => this._keydown(t))) } static get NAME() { return "tab" } show() { var e, i, t = this._element; this._elemIsActive(t) || (i = (e = this._getActiveElem()) ? j.trigger(e, "hide.bs.tab", { relatedTarget: t }) : null, j.trigger(t, "show.bs.tab", { relatedTarget: e }).defaultPrevented) || i && i.defaultPrevented || (this._deactivate(e, t), this._activate(t, e)) } _activate(t, e) { t && (t.classList.add(ls), this._activate(K.getElementFromSelector(t)), this._queueCallback(() => { "tab" === t.getAttribute("role") ? (t.removeAttribute("tabindex"), t.setAttribute("aria-selected", !0), this._toggleDropDown(t, !0), j.trigger(t, "shown.bs.tab", { relatedTarget: e })) : t.classList.add(hs) }, t, t.classList.contains("fade"))) } _deactivate(t, e) { t && (t.classList.remove(ls), t.blur(), this._deactivate(K.getElementFromSelector(t)), this._queueCallback(() => { "tab" === t.getAttribute("role") ? (t.setAttribute("aria-selected", !1), t.setAttribute("tabindex", "-1"), this._toggleDropDown(t, !1), j.trigger(t, "hidden.bs.tab", { relatedTarget: e })) : t.classList.remove(hs) }, t, t.classList.contains("fade"))) } _keydown(t) { if (["ArrowLeft", ss, "ArrowUp", os, rs, "End"].includes(t.key)) { t.stopPropagation(), t.preventDefault(); var s, e = this._getChildren().filter(t => !d(t)); let i; (i = [rs, "End"].includes(t.key) ? e[t.key === rs ? 0 : e.length - 1] : (s = [ss, os].includes(t.key), w(e, t.target, s, !0))) && (i.focus({ preventScroll: !0 }), ms.getOrCreateInstance(i).show()) } } _getChildren() { return K.find(gs, this._parent) } _getActiveElem() { return this._getChildren().find(t => this._elemIsActive(t)) || null } _setInitialAttributes(t, e) { this._setAttributeIfNotExists(t, "role", "tablist"); for (let t of e) this._setInitialAttributesOnChild(t) } _setInitialAttributesOnChild(t) { t = this._getInnerElement(t); var e = this._elemIsActive(t), i = this._getOuterElement(t); t.setAttribute("aria-selected", e), i !== t && this._setAttributeIfNotExists(i, "role", "presentation"), e || t.setAttribute("tabindex", "-1"), this._setAttributeIfNotExists(t, "role", "tab"), this._setInitialAttributesOnTargetPanel(t) } _setInitialAttributesOnTargetPanel(t) { var e = K.getElementFromSelector(t); e && (this._setAttributeIfNotExists(e, "role", "tabpanel"), t.id) && this._setAttributeIfNotExists(e, "aria-labelledby", "" + t.id) } _toggleDropDown(t, e) { let i = this._getOuterElement(t); i.classList.contains("dropdown") && ((t = (t, s) => { t = K.findOne(t, i); t && t.classList.toggle(s, e) })(ds, ls), t(".dropdown-menu", hs), i.setAttribute("aria-expanded", e)) } _setAttributeIfNotExists(t, e, i) { t.hasAttribute(e) || t.setAttribute(e, i) } _elemIsActive(t) { return t.classList.contains(ls) } _getInnerElement(t) { return t.matches(gs) ? t : K.findOne(gs, t) } _getOuterElement(t) { return t.closest(".nav-item, .list-group-item") || t } static jQueryInterface(t) { return this.each(function () { var e = ms.getOrCreateInstance(this); if ("string" == typeof t) { if (void 0 === e[t] || t.startsWith("_") || "constructor" === t) throw new TypeError(`No method named "${t}"`); e[t]() } }) } } j.on(document, "click.bs.tab", _s, function (t) { ["A", "AREA"].includes(this.tagName) && t.preventDefault(), d(this) || ms.getOrCreateInstance(this).show() }), j.on(window, "load.bs.tab", () => { for (var t of K.find('.active[data-bs-toggle="tab"], .active[data-bs-toggle="pill"], .active[data-bs-toggle="list"]')) ms.getOrCreateInstance(t) }), b(ms); let $s = "show", Ss = "showing", Ls = { animation: "boolean", autohide: "boolean", delay: "number" }, Os = { animation: !0, autohide: !0, delay: 5e3 }; class Is extends W { constructor(t, e) { super(t, e), this._timeout = null, this._hasMouseInteraction = !1, this._hasKeyboardInteraction = !1, this._setListeners() } static get Default() { return Os } static get DefaultType() { return Ls } static get NAME() { return "toast" } show() { j.trigger(this._element, "show.bs.toast").defaultPrevented || (this._clearTimeout(), this._config.animation && this._element.classList.add("fade"), this._element.classList.remove("hide"), g(this._element), this._element.classList.add($s, Ss), this._queueCallback(() => { this._element.classList.remove(Ss), j.trigger(this._element, "shown.bs.toast"), this._maybeScheduleHide() }, this._element, this._config.animation)) } hide() { !this.isShown() || j.trigger(this._element, "hide.bs.toast").defaultPrevented || (this._element.classList.add(Ss), this._queueCallback(() => { this._element.classList.add("hide"), this._element.classList.remove(Ss, $s), j.trigger(this._element, "hidden.bs.toast") }, this._element, this._config.animation)) } dispose() { this._clearTimeout(), this.isShown() && this._element.classList.remove($s), super.dispose() } isShown() { return this._element.classList.contains($s) } _maybeScheduleHide() { !this._config.autohide || this._hasMouseInteraction || this._hasKeyboardInteraction || (this._timeout = setTimeout(() => { this.hide() }, this._config.delay)) } _onInteraction(t, e) { switch (t.type) { case "mouseover": case "mouseout": this._hasMouseInteraction = e; break; case "focusin": case "focusout": this._hasKeyboardInteraction = e }e ? this._clearTimeout() : this._element === (t = t.relatedTarget) || this._element.contains(t) || this._maybeScheduleHide() } _setListeners() { j.on(this._element, "mouseover.bs.toast", t => this._onInteraction(t, !0)), j.on(this._element, "mouseout.bs.toast", t => this._onInteraction(t, !1)), j.on(this._element, "focusin.bs.toast", t => this._onInteraction(t, !0)), j.on(this._element, "focusout.bs.toast", t => this._onInteraction(t, !1)) } _clearTimeout() { clearTimeout(this._timeout), this._timeout = null } static jQueryInterface(t) { return this.each(function () { var e = Is.getOrCreateInstance(this, t); if ("string" == typeof t) { if (void 0 === e[t]) throw new TypeError(`No method named "${t}"`); e[t](this) } }) } } return V(Is), b(Is), { Alert: U, Button: J, Carousel: Ot, Collapse: Rt, Dropdown: fe, Modal: Ue, Offcanvas: gi, Popover: Mi, ScrollSpy: Qi, Tab: ms, Toast: Is, Tooltip: Ni } });